[
    {
        "level": "easy",
        "question": {
            "qname": "Swap all odd and even bits",
            "description": "Given an unsigned integer N. The task is to swap all odd bits with even bits. For example, if the given number is 23 (00010111), it should be converted to 43(00101011). Here, every even position bit is swapped with adjacent bit on right side(even position bits are highlighted in binary representation of 23), and every odd position bit is swapped with adjacent on left side.\n\nInput:\nThe first line of input contains T, denoting the number of testcases. Each testcase contains single line.\n\nOutput:\nFor each testcase in new line, print the converted number.\n\nConstraints:\n1 ≤ T ≤ 100\n1 ≤ N ≤ 100",
            "tags": [
                "alg",
                "bit"
            ],
            "image_path": "",
            "template": {
                "python": "def swapBits( x ):\n    #write your code here\n# Driver Program\nif __name__=='__main__':\n    try:\n        t = int(input())\n        for i in range(t):\n            n = int(input())\n            print(swapBits(n))\n            print()\n    except EOFError: \n        print (\"EOFError\")",
                "java": "import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass Test {\n    \n    // Driver program to test above function \n\tpublic static void main (String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tint t=sc.nextInt();\n\t\twhile(t>0)\n\t\t{\n\t\t    int n=sc.nextInt();\n\t\t    System.out.println(swapBits(n));\n\t\t}\n\t}\n\tstatic int swapBits(int n)\n\t{\n\t    //write your code here  \n    } \n}"
            },
            "sample_testcase_path": {
                "input": "Questions/swapOddEvenBits/sample_input.txt",
                "output": "Questions/swapOddEvenBits/sample_output.txt"
            },
            "testcase_path": {
                "input": "Questions/swapOddEvenBits/input.txt",
                "output": "Questions/swapOddEvenBits/output.txt"
            },
            "solution_path": "Questions/swapOddEvenBits/solution.txt",
            "time_complexity": "",
            "space_complexity": ""
        }
    },
    {
        "level": "easy",
        "question": {
            "qname": "Rotate bits",
            "description": "Given an integer N and an integer D, you are required to write a program to rotate the binary representation of the integer N by D digits to the left as well as right and print the results in decimal values after each of the rotation.\nNote: Integer N is stored using 16 bits. i.e. 12 will be stored as 0000.....001100.\n\nInput:\nFirst line of input contains a single integer T which denotes the number of test cases. Each test case contains two space separated integers N and D where N denotes the number to be rotated and D denotes the number of digits by which the number is required to be rotated.\n\nOutput:\nFor each testcase, in a new line, print the value of number N after rotating it to left by D digits in one line, and second line prints the value of number N after rotating it to the right by D digits.\n\nConstraints:\n1 <= T <= 100\n1 <= N <  216\n1 <= D <= 105",
            "tags": [
                "alg",
                "bit"
            ],
            "image_path": "",
            "template": {
                "python": "def rotate( n , d ):\n      \n# Driver Program\nif __name__=='__main__':\n    try:\n        t = int(input())\n        for i in range(t):\n            n = int(input())\n            d = int(input())\n            print(rotate(n,d))\n            print()\n    except EOFError: \n        print (\"EOFError\")",
                "java": "import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass Test {\n    \n    // Driver program to test above function \n\tpublic static void main (String[] args) {\n\t\tScanner sc=new Scanner(System.in);\n\t\tint t=sc.nextInt();\n\t\twhile(t>0)\n\t\t{\n\t\t    int n=sc.nextInt();\n                    int d=sc.nextInt();\n\t\t    rotate(n,d);\n\t\t}\n\t}\n\tstatic void rotate(int n,int d)\n\t{\n\t    //write your code here  \n    } \n}"
            },
            "sample_testcase_path": {
                "input": "Questions/rotateBits/sample_input.txt",
                "output": "Questions/rotateBits/sample_output.txt"
            },
            "testcase_path": {
                "input": "Questions/rotateBits/input.txt",
                "output": "Questions/rotateBits/output.txt"
            },
            "solution_path": "Questions/rotateBits/solution.txt",
            "time_complexity": "",
            "space_complexity": ""
        }
    },
    {
        "level": "medium",
        "question": {
            "qname": "",
            "description": "",
            "tags": [
                "alg",
                "bit"
            ],
            "image_path": "",
            "template": {
                
            },
            "sample_testcase_path": {
                "input": "Questions//sample_input.txt",
                "output": "Questions//sample_output.txt"
            },
            "testcase_path": {
                "input": "Questions//input.txt",
                "output": "Questions//output.txt"
            },
            "solution_path": "Questions//solution.txt",
            "time_complexity": "",
            "space_complexity": ""
        }
    }
]